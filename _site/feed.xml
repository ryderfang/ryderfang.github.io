<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.8.7">Jekyll</generator><link href="http://localhost:2333/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:2333/" rel="alternate" type="text/html" /><updated>2021-10-27T11:36:00+08:00</updated><id>http://localhost:2333/feed.xml</id><title type="html">$HOME - 给岁月以文明</title><author><name>Yimu</name></author><entry><title type="html">学习 GPUImage 2 | GPUImage 2 (Swift)</title><link href="http://localhost:2333/2019/11/08/learning-gpuimage-2.html" rel="alternate" type="text/html" title="学习 GPUImage 2 | GPUImage 2 (Swift)" /><published>2019-11-08T00:00:00+08:00</published><updated>2019-11-08T00:00:00+08:00</updated><id>http://localhost:2333/2019/11/08/learning-gpuimage-2</id><content type="html" xml:base="http://localhost:2333/2019/11/08/learning-gpuimage-2.html">&lt;h1 id=&quot;概述&quot;&gt;概述&lt;/h1&gt;
&lt;p&gt;&lt;br /&gt;
书接上文，Brad Larson 在 2016 年用 Swift 语言重写了 GPUImage，创造了新的 &lt;a href=&quot;https://github.com/BradLarson/GPUImage2&quot;&gt;&lt;strong&gt;GPUImage2&lt;/strong&gt;&lt;/a&gt;，同样在作者的网站上有介绍：&lt;a href=&quot;http://www.sunsetlakesoftware.com/2016/04/16/introducing-gpuimage-2-redesigned-swift&quot;&gt;http://www.sunsetlakesoftware.com/2016/04/16/introducing-gpuimage-2-redesigned-swift&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;作为第二代框架，它的优势主要有：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Swift 比 Objective-C 更加简洁，代码量减少了 80%，作者做过统计：&lt;/p&gt;

    &lt;table&gt;
      &lt;thead&gt;
        &lt;tr&gt;
          &lt;th&gt;GPUImage Version&lt;/th&gt;
          &lt;th&gt;Files&lt;/th&gt;
          &lt;th&gt;Lines of Code&lt;/th&gt;
        &lt;/tr&gt;
      &lt;/thead&gt;
      &lt;tbody&gt;
        &lt;tr&gt;
          &lt;td&gt;Objective-C (without shaders)&lt;/td&gt;
          &lt;td&gt;359&lt;/td&gt;
          &lt;td&gt;20107&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
          &lt;td&gt;Swift (without shaders)&lt;/td&gt;
          &lt;td&gt;157&lt;/td&gt;
          &lt;td&gt;4549&lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
          &lt;td&gt;Shaders&lt;/td&gt;
          &lt;td&gt;233&lt;/td&gt;
          &lt;td&gt;6670&lt;/td&gt;
        &lt;/tr&gt;
      &lt;/tbody&gt;
    &lt;/table&gt;

    &lt;p&gt;作者举了一个自定义操作符的例子，通过自定义 &lt;code class=&quot;highlighter-rouge&quot;&gt;operator --&amp;gt;&lt;/code&gt; 表示 addTarget 简化了代码。&lt;/p&gt;

    &lt;p&gt;作者在 &lt;a href=&quot;http://www.sunsetlakesoftware.com/2014/12/02/why-were-rewriting-our-robotics-software-swift&quot;&gt;另一篇文章&lt;/a&gt; 中解释了为什么要用 Swift 重写软件，其中针对开发中遇到的一些常见错误，由 OC 语言本身设计不够严谨导致的有：&lt;/p&gt;
    &lt;ul&gt;
      &lt;li&gt;nil 消息转发会导致错误被隐藏，延迟被发现。这里有两个例子：
        &lt;ul&gt;
          &lt;li&gt;用 IB 来开发界面的时候，如果忘记连线，会导致属性为 nil，按钮点击无响应，很难排查问题；&lt;/li&gt;
          &lt;li&gt;作者公司是做机器人的，有一个例子导致了上万美元的损失。存储机器人移动坐标的类在特定情况下变成了 nil，这样坐标系统的 Z 轴变成了 0，
机械臂会把打印指针插入打印台里移动，导致产品损坏。&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;对 NSError 和其他 OC 错误不合适的处理
        &lt;ul&gt;
          &lt;li&gt;作者的意思是通常 error 是通过二级指针传入传出的，如果不小心置空，容易出问题，参见 &lt;a href=&quot;https://stackoverflow.com/questions/1808929/handling-nserror-when-reading-from-file&quot;&gt;StackOverFlow&lt;/a&gt; 的例子&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;Object (id) 类型错误转换&lt;/li&gt;
      &lt;li&gt;枚举类型与整数藕合 (Swift 支持自定义类型枚举)&lt;/li&gt;
    &lt;/ul&gt;
    &lt;div style=&quot;margin:20px&quot; /&gt;
  &lt;/li&gt;
  &lt;li&gt;不再局限于 iOS/Mac，新一代框架可以运行在 Linux 上 (支持 Swift)，甚至可以跑在树莓派上。&lt;/li&gt;
  &lt;li&gt;新增特性：支持在图片上任意形状添加滤镜；像素级裁剪；高斯和均值滤波自动降采样和升采样。&lt;/li&gt;
&lt;/ol&gt;</content><author><name>Yimu</name></author><category term="GPUImage" /><category term="iOS" /><summary type="html">概述 书接上文，Brad Larson 在 2016 年用 Swift 语言重写了 GPUImage，创造了新的 GPUImage2，同样在作者的网站上有介绍：http://www.sunsetlakesoftware.com/2016/04/16/introducing-gpuimage-2-redesigned-swift。</summary></entry><entry><title type="html">学习 GPUImage | GPUImage Framework</title><link href="http://localhost:2333/2019/11/07/learning-gpuimage-1.html" rel="alternate" type="text/html" title="学习 GPUImage | GPUImage Framework" /><published>2019-11-07T00:00:00+08:00</published><updated>2019-11-07T00:00:00+08:00</updated><id>http://localhost:2333/2019/11/07/learning-gpuimage-1</id><content type="html" xml:base="http://localhost:2333/2019/11/07/learning-gpuimage-1.html">&lt;h1 id=&quot;概述&quot;&gt;概述&lt;/h1&gt;
&lt;p&gt;&lt;br /&gt;
&lt;img src=&quot;https://img.alicdn.com/tfs/TB1ws.EmO_1gK0jSZFqXXcpaXXa-240-240.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/BradLarson/GPUImage&quot;&gt;&lt;strong&gt;GPUImage&lt;/strong&gt;&lt;/a&gt; 是 iOS 上一个开源图像处理库，基于 OpenGL GS 2.0，作者是 Brad Larson。&lt;/p&gt;

&lt;p&gt;作者于 2012 年发布了这个框架，官方网站介绍：&lt;a href=&quot;http://www.sunsetlakesoftware.com/2012/02/12/introducing-gpuimage-framework&quot;&gt;http://www.sunsetlakesoftware.com/2012/02/12/introducing-gpuimage-framework&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;相对于系统的 CoreImage (iOS 5.0)，GPUImage 可以更方便地自定义滤镜，并且在处理速度上更快。相对于 CPU 计算来说，GPU 在处理图形图像时更具优势，
在 iPhone 4 的机器上，GPU 的图片处理性能比 CPU 强百倍以上。&lt;/p&gt;

&lt;p&gt;GPUImage 是基于 BSD 协议的开源框架，我们可以直接在 &lt;a href=&quot;https://github.com/BradLarson/GPUImage&quot;&gt;GitHub&lt;/a&gt; 上获取源码。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;系统要求
    &lt;ul&gt;
      &lt;li&gt;iPhone 4+ (iPhone 3G/iPod 1/iPod 2 不支持)&lt;/li&gt;
      &lt;li&gt;iOS 4.0+ (依赖 iOS 5.0 SDK)&lt;/li&gt;
      &lt;li&gt;支持 ARC/MRC (-fobjc-arc)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;可以看出，GPUImage 是一个非常古老的库，GitHub 最新的提交也只到 2016.05，作者应该不再更新。&lt;/p&gt;

&lt;p&gt;作者后续又推出了基于 Swift 和 OpenGL 的 &lt;a href=&quot;https://github.com/BradLarson/GPUImage2&quot;&gt;&lt;strong&gt;GPUImage2&lt;/strong&gt;&lt;/a&gt; 和
基于 Metal 的 &lt;a href=&quot;https://github.com/BradLarson/GPUImage3&quot;&gt;&lt;strong&gt;GPUImage3&lt;/strong&gt;&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;但是初代 GPUImage 仍然可以用在最新的 iOS 13.2 上，而且它是后续两个框架的基础。所以我们仍然有必要去研究和学习它。&lt;/p&gt;

&lt;h1 id=&quot;gpu-渲染&quot;&gt;GPU 渲染&lt;/h1&gt;

&lt;p&gt;&lt;img src=&quot;https://img.alicdn.com/tfs/TB1iPL0nbH1gK0jSZFwXXc7aXXa-1308-387.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;GPU 的高度并行结构使得在大块数据并行算法上比 CPU 更加高效，所以在 iOS 上使用 GPU 渲染图形图像会比 CPU 更快。&lt;/p&gt;

&lt;p&gt;经过比较，GPUImage 在处理同一张图片的滤镜操作会比 CPU 操作快百倍以上，比系统的 Core Image 快 40 倍；作者的测试是在 iPhone 4 上进行的，我在 iPhone 6s 上重新运行了一下 Benchmark 测试发现，现在差距已经没有这么大了，一方面 CPU 在升级，另一方面 Core Image 通常也会使用 GPU 进行计算，但 GPUImage 仍然优秀！比 CPU 快 10位，视频处理比 Core Image 快一倍！&lt;/p&gt;

&lt;div style=&quot;text-align:center;margin:20px;&quot;&gt;
&lt;img src=&quot;https://img.alicdn.com/tfs/TB1yjvYneH2gK0jSZFEXXcqMpXa-376-669.png&quot; width=&quot;200&quot; height=&quot;356&quot; style=&quot;margin-right: 40px&quot; /&gt;
&lt;img src=&quot;https://img.alicdn.com/tfs/TB12mzVnhz1gK0jSZSgXXavwpXa-376-669.png&quot; width=&quot;200&quot; height=&quot;356&quot; /&gt;
&lt;/div&gt;

&lt;p&gt;了解 GPU 渲染还得从 OpenGL 说起，作为一个跨语言、跨平台的 API 规范，OpenGL 将操作 GPU 硬件的图形指定翻译成易用的 API 接口。在嵌入式平台，如 iOS/安卓 上，OpenGL 的子集叫 OpenGL ES （OpenGL for Embedded Systems ），本文说的 GPUImage 就是基于此进一步封装和优化的。&lt;/p&gt;

&lt;p&gt;引用下苹果 &lt;a href=&quot;https://developer.apple.com/library/archive/documentation/3DDrawing/Conceptual/OpenGLES_ProgrammingGuide/Introduction/Introduction.html&quot;&gt;官方文档&lt;/a&gt; 的图：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://img.alicdn.com/tfs/TB1bi20nhD1gK0jSZFKXXcJrVXa-1344-249.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;可以看出，我们是通过 OpenGL ES 与硬件打交道的，那为什么平时开发过程中，很难感觉到呢？这是由于苹果通过 UIKit 和 Core Animation 将实现细节隐藏了，这也可以解释为什么 UIView/NSView 绘制实现都交给了 CALayer，其实就是通过 CoreAnimation (虽然名字叫 Animation，但动画仅是其中的一小部分) 调用 OpenGL ES/Core Graphics 来完成视图渲染的。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://img.alicdn.com/tfs/TB1XeL1nbj1gK0jSZFuXXcrHpXa-500-201.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;那 GPU 渲染包含哪些步骤呢？下面的 OpenGL 渲染流水线展示了主要的流程：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://img.alicdn.com/tfs/TB1D160nkT2gK0jSZPcXXcKkpXa-642-324.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;不管是顶点信息 (几何信息)，还是像素信息 (图片信息)，传入 GPU 后都被处理成 OpenGL 指令存储在 Display List 中。&lt;/li&gt;
  &lt;li&gt;顶点信息会被存储成矩阵，经过原始处理，如各种变换、反射和坐标转换后，进行组装。&lt;/li&gt;
  &lt;li&gt;像素信息也会经过缩放、裁剪等操作后，存储在纹理中。&lt;/li&gt;
  &lt;li&gt;光珊化 (Rasterization) 会将以上处理后得到的原始数据变成一系列片元 (Fragment)，每一个片元代表了最终帧缓冲区中的一个像素所有的信息，包括位置、颜色等。&lt;/li&gt;
  &lt;li&gt;片元操作，也叫片元着色 (Fragment Shader)，根据光珊化的结果逐一操作片元，获得最终渲染的像素数据。&lt;/li&gt;
  &lt;li&gt;最后帧缓冲区会把渲染好的数据返回给设备显示。&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;整体架构&quot;&gt;整体架构&lt;/h1&gt;</content><author><name>Yimu</name></author><category term="GPUImage" /><category term="iOS" /><summary type="html">概述</summary></entry><entry><title type="html">几种 iOS 序列与反序列化框架对比 | ORM</title><link href="http://localhost:2333/2019/09/21/ios-orm-library.html" rel="alternate" type="text/html" title="几种 iOS 序列与反序列化框架对比 | ORM" /><published>2019-09-21T00:00:00+08:00</published><updated>2019-09-21T00:00:00+08:00</updated><id>http://localhost:2333/2019/09/21/ios-orm-library</id><content type="html" xml:base="http://localhost:2333/2019/09/21/ios-orm-library.html">&lt;p&gt;iOS 开发过程中经常遇到需要对象转化为 JSON，或者反过来将 JSON 解析成对象。&lt;/p&gt;

&lt;p&gt;比较知名的开源框架有：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://github.com/ibireme/YYModel&quot;&gt;YYModel&lt;/a&gt;&lt;/p&gt;

    &lt;p&gt;ibreme 大神 YYKit 中的一部分，实现了高效模型转化、易用且轻量的一个框架。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://github.com/CoderMJLee/MJExtension&quot;&gt;MJExtension&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://github.com/jsonmodel/jsonmodel&quot;&gt;JSONModel&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://github.com/Mantle/Mantle&quot;&gt;Mantle&lt;/a&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;</content><author><name>Yimu</name></author><category term="iOS" /><summary type="html">iOS 开发过程中经常遇到需要对象转化为 JSON，或者反过来将 JSON 解析成对象。</summary></entry><entry><title type="html">从搬瓦工到 Vlutr，继续科学上网 | GFW</title><link href="http://localhost:2333/2019/09/10/shadowsocks-with-vlutr.html" rel="alternate" type="text/html" title="从搬瓦工到 Vlutr，继续科学上网 | GFW" /><published>2019-09-10T00:00:00+08:00</published><updated>2019-09-10T00:00:00+08:00</updated><id>http://localhost:2333/2019/09/10/shadowsocks-with-vlutr</id><content type="html" xml:base="http://localhost:2333/2019/09/10/shadowsocks-with-vlutr.html">&lt;p&gt;之前用的 bangwagon 突然连不上了，找到现在可用的官网 (https://bwh88.net/clientarea.php?action=products) 看了下，服务虽然到期了，但整个 Service 被停用了。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://img.alicdn.com/tfs/TB1tiAwfpY7gK0jSZKzXXaikpXa-1970-312.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;发了个 Ticket 问了下，倒是很快回复了。结论就是我之前买的那种 10G 的产品是 OpenVZ v6 架构，已经不再维护，下架了。
看了下，现在最便宜的就是 20G 这款，一年 50 美金，差不多也是行情价。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://img.alicdn.com/tfs/TB1xY3zfxz1gK0jSZSgXXavwpXa-628-708.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;考虑到 bandwagon 配置并不是特别方便，经同事推荐改用 Vlutr，现在优惠还不错 (重点)：&lt;/p&gt;

&lt;p&gt;1、&lt;u&gt;充 $10 送 $25&lt;/u&gt;。 &lt;a href=&quot;https://www.vultr.com/?ref=8250675&quot;&gt;点击注册&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;2、&lt;u&gt;充 $25 送 $50&lt;/u&gt;。 &lt;a href=&quot;https://www.vultr.com/?ref=8250676-4F&quot;&gt;点击注册&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;最关键的是，支持 &lt;strong&gt;支付宝&lt;/strong&gt; 付款！&lt;/p&gt;

&lt;h1 id=&quot;注册&quot;&gt;注册&lt;/h1&gt;

&lt;p&gt;注册非常简单，点击上面的链接，用邮箱注册即可。都不用激活，方便的一比。&lt;/p&gt;

&lt;h1 id=&quot;充值&quot;&gt;充值&lt;/h1&gt;

&lt;p&gt;登录之后，在 https://my.vultr.com/billing/ 页面，选择 Alipay (支付宝)，充 $25，搞定！&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;$25 足够用 5 个月了！&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&quot;https://img.alicdn.com/tfs/TB1VusFfAT2gK0jSZFkXXcIQFXa-979-622.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;买机器&quot;&gt;买机器&lt;/h1&gt;

&lt;p&gt;进入 https://my.vultr.com/deploy/&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;地区 选欧洲或者美国的，相对快一点。&lt;/li&gt;
  &lt;li&gt;操作系统 选 Ubuntu, 版本 18.04 x64。(因为这是 LTS 版本，相对稳定点)&lt;/li&gt;
  &lt;li&gt;机器类型选最便宜的 $5/月 的。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;其他不用管，直接 Deploy 吧。&lt;/p&gt;

&lt;h1 id=&quot;配置&quot;&gt;配置&lt;/h1&gt;

&lt;p&gt;等机器准备好，在 Products 页面中找到你的机器 IP 地址、密码等信息。打开本地终端，
&lt;code class=&quot;highlighter-rouge&quot;&gt;ssh root@ip -p 22&lt;/code&gt;
输入密码，登录远程机器。&lt;/p&gt;

&lt;p&gt;通过脚本一键安装 SS 服务端即可。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;wget --no-check-certificate -O shadowsocks.sh https://raw.githubusercontent.com/teddysun/shadowsocks_install/master/shadowsocks.sh
chmod +x shadowsocks.sh
./shadowsocks.sh 2&amp;gt;&amp;amp;1 | tee shadowsocks.log
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;设置端口号、密码等，等脚本执行完。
这里有个坑，脚本里 shadowsocks.json 里配置的服务器地址是 0.0.0.0，有 Vlutr 环境里好像不通，我之前用 bandwagon 不用改，但是 Vlutr 不行。&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;vim /etc/shadowsocks.json
// 把里面的 &quot;server&quot; 字段修改为服务器的 IP 址。
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;在本地，用 SS 服务端，设置好同样的 IP 地址、端口号和密码即可。&lt;/p&gt;

&lt;p&gt;至此，就可以去浪了！🌊🌊🌊&lt;/p&gt;</content><author><name>Yimu</name></author><category term="VPS" /><category term="Config" /><summary type="html">之前用的 bangwagon 突然连不上了，找到现在可用的官网 (https://bwh88.net/clientarea.php?action=products) 看了下，服务虽然到期了，但整个 Service 被停用了。</summary></entry><entry><title type="html">怎么去面试一个 iOS 开发 | iOS Tutorial</title><link href="http://localhost:2333/2019/07/17/ios-interview-tutorial.html" rel="alternate" type="text/html" title="怎么去面试一个 iOS 开发 | iOS Tutorial" /><published>2019-07-17T00:00:00+08:00</published><updated>2019-07-17T00:00:00+08:00</updated><id>http://localhost:2333/2019/07/17/ios-interview-tutorial</id><content type="html" xml:base="http://localhost:2333/2019/07/17/ios-interview-tutorial.html">&lt;h1 id=&quot;前言&quot;&gt;前言&lt;/h1&gt;

&lt;p&gt;这是一篇 iOS 面试问题总结，也是对自己 iOS 开发的总结。老实说作为一个半路出家的 iOS 程序员 ( 2016.12 ~ now ) ，心里还是很虚的。自己到底是什么样水平，以后的技术之路要怎么走，这些心里还没有把握，希望整理完之后，有个答案。&lt;/p&gt;

&lt;!--  more --&gt;

&lt;h1 id=&quot;roadmap-路线图&quot;&gt;Roadmap 路线图&lt;/h1&gt;

&lt;blockquote&gt;
  &lt;p&gt;首先，我们需要有一个大图，iOS 开发到底包含了哪些东西？&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&quot;https://fangr-cc-image.oss-cn-beijing.aliyuncs.com/19-09-21/ios_xmind.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;1-语言基础篇&quot;&gt;1. 语言基础篇&lt;/h1&gt;

&lt;h2 id=&quot;11-关键词类&quot;&gt;1.1 关键词类&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;property
    &lt;ul&gt;
      &lt;li&gt;weak&lt;/li&gt;
      &lt;li&gt;atomic 线程安全吗&lt;/li&gt;
      &lt;li&gt;copy 与 assign&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;id 与 instancetype&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;__weak 与 __block&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;__weak 与 _Unsafe_Unretain&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;block
    &lt;ul&gt;
      &lt;li&gt;原理&lt;/li&gt;
      &lt;li&gt;循环引用&lt;/li&gt;
      &lt;li&gt;copy 属性 (MRC 传统)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;category
    &lt;ul&gt;
      &lt;li&gt;方法列表加载时机&lt;/li&gt;
      &lt;li&gt;如何添加属性；关联对象的存储&lt;/li&gt;
      &lt;li&gt;category 与 class extension&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;2uikit&quot;&gt;2.UIKit&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;性能优化
    &lt;ul&gt;
      &lt;li&gt;离屏渲染&lt;/li&gt;
      &lt;li&gt;卡顿优化&lt;/li&gt;
      &lt;li&gt;图片渲染&lt;/li&gt;
      &lt;li&gt;异步绘制&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;事件传递机制
    &lt;ul&gt;
      &lt;li&gt;
        &lt;p&gt;hitTest 与 pointInside:withEvent:&lt;/p&gt;

        &lt;div class=&quot;language-objc highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;UIView&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;hitTest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CGPoint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;point&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;withEvent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;UIEvent&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;event&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// 1. 判断自己能否接收触摸事件&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;userInteractionEnabled&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;NO&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hidden&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;YES&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;alpha&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mo&quot;&gt;01&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// 2. 判断触摸点在不在自己范围内&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;self&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;pointInside&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;point&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;withEvent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;nil&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// 3. 从后往前遍历自己的子控件，看是否有子控件更适合响应此事件&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;count&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;subviews&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;count&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;--&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;UIView&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;childView&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;subviews&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;CGPoint&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;childPoint&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;self&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;convertPoint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;point&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;toView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;childView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;UIView&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fitView&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;childView&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;hitTest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;childPoint&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;withEvent&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;event&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fitView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fitView&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// 没有找到比自己更合适的 view&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;        &lt;/div&gt;

        &lt;p&gt;事件传递是自根向叶的 (根是 UIApplicatin),&lt;/p&gt;

        &lt;p&gt;UIApplication -&amp;gt; UIWindow -&amp;gt; View -&amp;gt; subviews&lt;/p&gt;
      &lt;/li&gt;
      &lt;li&gt;
        &lt;p&gt;响应链 与 UIResponder&lt;/p&gt;

        &lt;p&gt;响应链是由叶向根的，所有 pointInside 返回 YES 的 view 构成&lt;/p&gt;

        &lt;p&gt;view -&amp;gt; superView -&amp;gt; viewController -&amp;gt; UIWindow -&amp;gt; UIApplication&lt;/p&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;3-底层原理&quot;&gt;3. 底层原理&lt;/h1&gt;

&lt;h2 id=&quot;31-runloop&quot;&gt;3.1 RunLoop&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;mode&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;source0 &amp;amp; source1&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;后台线程保活&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;32-runtime&quot;&gt;3.2 Runtime&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;源码 https://opensource.apple.com/source/objc4/&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;Method Swizzling 原理&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;33-autoreleasepool&quot;&gt;3.3 AutoreleasePool&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;AutoReleasePool 与 @autoreleasePool&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Tagged Pointer&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;34-消息转发&quot;&gt;3.4 消息转发&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;四个步骤&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;4-开发实践&quot;&gt;4. 开发实践&lt;/h1&gt;

&lt;h2 id=&quot;41-多线程&quot;&gt;4.1 多线程&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;GCD&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;NSThread&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;各种锁&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;42-架构&quot;&gt;4.2 架构&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;https://www.jianshu.com/p/f8806c2f3ee3&lt;/p&gt;
&lt;/blockquote&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;MVC&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;MVP&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;MVVM&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;5-其他知识&quot;&gt;5. 其他知识&lt;/h1&gt;

&lt;h2 id=&quot;51-app-启动流程&quot;&gt;5.1 App 启动流程&lt;/h2&gt;

&lt;h2 id=&quot;52-jspatch&quot;&gt;5.2 JsPatch&lt;/h2&gt;

&lt;h2 id=&quot;53-算法&quot;&gt;5.3 算法&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;LRU
    &lt;ul&gt;
      &lt;li&gt;常见实现就是 &lt;code class=&quot;highlighter-rouge&quot;&gt;HashMap + 双向链表&lt;/code&gt;，HashMap 的 value 是 链表的节点地址。&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;get&lt;/strong&gt;: 查找 HashMap，找到就把链接表对应节点移到头部，返回值；否则返回空。&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;set&lt;/strong&gt;: 查找 HashMap，如果存在，更新值并移动节点到链表头部；不存在，新增值放到链表头部，空间不够则淘汰尾部节点。
&lt;img src=&quot;https://pic2.zhimg.com/80/v2-09f037608b1b2de70b52d1312ef3b307_hd.jpg&quot; alt=&quot;&quot; /&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;54-设计模式&quot;&gt;5.4 设计模式&lt;/h2&gt;</content><author><name>Yimu</name></author><category term="iOS" /><category term="Interview" /><summary type="html">前言</summary></entry><entry><title type="html">搜集一些 iOS 面试问题 | iOS Problems</title><link href="http://localhost:2333/2018/12/07/some-ios-problems.html" rel="alternate" type="text/html" title="搜集一些 iOS 面试问题 | iOS Problems" /><published>2018-12-07T00:00:00+08:00</published><updated>2018-12-07T00:00:00+08:00</updated><id>http://localhost:2333/2018/12/07/some-ios-problems</id><content type="html" xml:base="http://localhost:2333/2018/12/07/some-ios-problems.html">&lt;h2 id=&quot;section-1&quot;&gt;Section 1&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;https://fangr-cc-image.oss-cn-beijing.aliyuncs.com/18-11-30/13483958.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;前两题，了解一定的 block 内存结构知识就可以解决。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;language-objc highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__block_impl_t&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;isa&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Flags&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Reserved&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;FunPtr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__my_block_impl_x&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__block_impl_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;impl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Desc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tempImpl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;__my_block_func_0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Hello world&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;__my_block_func_1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__my_block_impl_x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;__cself&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NSString&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;NSLog&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;@&quot;%d %@&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;__cself&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tempImpl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))();&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;HookBlockToPrintHelloWorld&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;block&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__my_block_impl_x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;__bridge&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__my_block_impl_x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;block&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;impl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;FunPtr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;__my_block_func_0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;HookBlockToPrintArguments&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;block&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__my_block_impl_x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;__bridge&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;__my_block_impl_x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;block&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tempImpl&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;impl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;FunPtr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;impl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;FunPtr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;__my_block_func_1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;HookEveryBlockToPrintArguments&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;argc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;argv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[])&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;@autoreleasepool&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;^&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;blk1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;^&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;NSLog&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;@&quot;Block1 invoke!&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;HookBlockToPrintHelloWorld&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;blk1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;blk1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

        &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;^&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;blk2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NSString&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;^&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NSString&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;NSLog&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;@&quot;Block2 invoke!&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;HookBlockToPrintArguments&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;blk2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;blk2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;123&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;@&quot;aaa&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;第三题需要利用 fishhook 这个库，同时如果需要针对所有类型的 block 都打印参数，还需要 NSInvocation 的辅助。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;完整的实现放在 GitHub 上:
&lt;a href=&quot;https://github.com/FongRay/Snippets/blob/master/Snippets-Mac/block/main-block.mm&quot;&gt;⚔️Hook Block!&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;section-2&quot;&gt;Section 2&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;https://fangr-cc-image.oss-cn-beijing.aliyuncs.com/18-11-30/64657547.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;section-3&quot;&gt;Section 3&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;https://fangr-cc-image.oss-cn-beijing.aliyuncs.com/18-11-30/71527803.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;NSObject 与 &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;NSObject&amp;gt;&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;ol&gt;
  &lt;li&gt;一个是类（基类），一个是协议（根协议）&lt;/li&gt;
  &lt;li&gt;NSObject 也是符合 &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;NSObject&amp;gt;&lt;/code&gt; 协议的&lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;language-objc highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;@interface&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;NSObject&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NSObject&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;#pragma clang diagnostic push
#pragma clang diagnostic ignored &quot;-Wobjc-interface-ivars&quot;
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;Class&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;isa&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;OBJC_ISA_AVAILABILITY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;#pragma clang diagnostic pop
&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;load&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;initialize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;instancetype&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;init&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;#if NS_ENFORCE_NSOBJECT_DESIGNATED_INITIALIZER
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;NS_DESIGNATED_INITIALIZER&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;#endif
&lt;/span&gt;    &lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;instancetype&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;OBJC_SWIFT_UNAVAILABLE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;use object initializers instead&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;instancetype&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;allocWithZone&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_NSZone&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;zone&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;OBJC_SWIFT_UNAVAILABLE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;use object initializers instead&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;instancetype&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;alloc&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;OBJC_SWIFT_UNAVAILABLE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;use object initializers instead&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dealloc&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;OBJC_SWIFT_UNAVAILABLE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;use 'deinit' to define a de-initializer&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;finalize&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;OBJC_DEPRECATED&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Objective-C garbage collection is no longer supported&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;copy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mutableCopy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;copyWithZone&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_NSZone&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;zone&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;OBJC_ARC_UNAVAILABLE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;mutableCopyWithZone&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_NSZone&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;zone&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;OBJC_ARC_UNAVAILABLE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BOOL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;instancesRespondToSelector&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SEL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;aSelector&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BOOL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;conformsToProtocol&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Protocol&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;protocol&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IMP&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;methodForSelector&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SEL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;aSelector&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;IMP&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;instanceMethodForSelector&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SEL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;aSelector&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;doesNotRecognizeSelector&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SEL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;aSelector&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;forwardingTargetForSelector&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SEL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;aSelector&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;OBJC_AVAILABLE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;forwardInvocation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NSInvocation&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;anInvocation&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;OBJC_SWIFT_UNAVAILABLE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NSMethodSignature&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;methodSignatureForSelector&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SEL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;aSelector&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;OBJC_SWIFT_UNAVAILABLE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NSMethodSignature&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;instanceMethodSignatureForSelector&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SEL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;aSelector&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;OBJC_SWIFT_UNAVAILABLE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BOOL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;allowsWeakReference&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;UNAVAILABLE_ATTRIBUTE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BOOL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;retainWeakReference&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;UNAVAILABLE_ATTRIBUTE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BOOL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;isSubclassOfClass&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Class&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;aClass&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BOOL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;resolveClassMethod&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SEL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;sel&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;OBJC_AVAILABLE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BOOL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;resolveInstanceMethod&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SEL&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;sel&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;OBJC_AVAILABLE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NSUInteger&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hash&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Class&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;superclass&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Class&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;OBJC_SWIFT_UNAVAILABLE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;use 'aClass.self' instead&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NSString&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;description&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NSString&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;debugDescription&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;@end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;@protocol NSObject

- (BOOL)isEqual:(id)object;
@property (readonly) NSUInteger hash;

@property (readonly) Class superclass;
- (Class)class OBJC_SWIFT_UNAVAILABLE(&quot;use 'type(of: anObject)' instead&quot;);
- (instancetype)self;

- (id)performSelector:(SEL)aSelector;
- (id)performSelector:(SEL)aSelector withObject:(id)object;
- (id)performSelector:(SEL)aSelector withObject:(id)object1 withObject:(id)object2;

- (BOOL)isProxy;

- (BOOL)isKindOfClass:(Class)aClass;
- (BOOL)isMemberOfClass:(Class)aClass;
- (BOOL)conformsToProtocol:(Protocol *)aProtocol;

- (BOOL)respondsToSelector:(SEL)aSelector;

- (instancetype)retain OBJC_ARC_UNAVAILABLE;
- (oneway void)release OBJC_ARC_UNAVAILABLE;
- (instancetype)autorelease OBJC_ARC_UNAVAILABLE;
- (NSUInteger)retainCount OBJC_ARC_UNAVAILABLE;

- (struct _NSZone *)zone OBJC_ARC_UNAVAILABLE;

@property (readonly, copy) NSString *description;
@optional
@property (readonly, copy) NSString *debugDescription;

@end
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;section-4&quot;&gt;Section 4&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;https://fangr-cc-image.oss-cn-beijing.aliyuncs.com/18-11-30/97038988.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;</content><author><name>Yimu</name></author><category term="iOS" /><category term="Interview" /><summary type="html">Section 1</summary></entry><entry><title type="html">Shadowsocks 翻墙和搬瓦工 VPS 配置 | GFW</title><link href="http://localhost:2333/2018/06/21/shadow-socks-and-bandwagon.html" rel="alternate" type="text/html" title="Shadowsocks 翻墙和搬瓦工 VPS 配置 | GFW" /><published>2018-06-21T00:00:00+08:00</published><updated>2018-06-21T00:00:00+08:00</updated><id>http://localhost:2333/2018/06/21/shadow-socks-and-bandwagon</id><content type="html" xml:base="http://localhost:2333/2018/06/21/shadow-socks-and-bandwagon.html">&lt;h3 id=&quot;这是干啥的&quot;&gt;这是干啥的&lt;/h3&gt;

&lt;p&gt;敏感你懂的，不多谈。🌝 🌝 🌝&lt;/p&gt;

&lt;h3 id=&quot;怎么用&quot;&gt;怎么用&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;下载 &lt;code class=&quot;highlighter-rouge&quot;&gt;ShadowsocksX-NG&lt;/code&gt;，&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;https://github.com/shadowsocks/ShadowsocksX-NG/releases/&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;配置自己的 VPS，比如我自己使用的 Bandwagon VPS，或者使用其他 SS server 地址&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;在 &lt;code class=&quot;highlighter-rouge&quot;&gt;ShadowsocksX-NG&lt;/code&gt; 中添加服务器，配置好可以 FQ 了。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;搬瓦工&quot;&gt;搬瓦工&lt;/h3&gt;

&lt;p&gt;目前可用的主页地址是&lt;/p&gt;

&lt;p&gt;https://bwh1.net/clientarea.php?action=products&lt;/p&gt;

&lt;p&gt;我买的最便宜的一个 &lt;code class=&quot;highlighter-rouge&quot;&gt;10G VZ - PROMO&lt;/code&gt;，一个月 $2.99，但年付才 $19.99 (130 软妹币) 而已。&lt;/p&gt;

&lt;p&gt;每月流量 &lt;code class=&quot;highlighter-rouge&quot;&gt;550GB&lt;/code&gt; 根本用不完&lt;/p&gt;

&lt;p&gt;有需要的朋友，如果不想自己配置，可以给我转 ￥10 (一个月)，我把我的 VPS 共享给你。&lt;/p&gt;

&lt;!-- more --&gt;

&lt;h3 id=&quot;配置项&quot;&gt;配置项&lt;/h3&gt;

&lt;p&gt;在 &lt;code class=&quot;highlighter-rouge&quot;&gt;ShadowsocksX-NG&lt;/code&gt; 的服务器配置中，导入如下配置即可&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;{
  &quot;random&quot; : false,
  &quot;authPass&quot; : null,
  &quot;useOnlinePac&quot; : false,
  &quot;TTL&quot; : 0,
  &quot;global&quot; : false,
  &quot;reconnectTimes&quot; : 3,
  &quot;index&quot; : 0,
  &quot;proxyType&quot; : 0,
  &quot;proxyHost&quot; : null,
  &quot;authUser&quot; : null,
  &quot;proxyAuthPass&quot; : null,
  &quot;isDefault&quot; : false,
  &quot;pacUrl&quot; : null,
  &quot;configs&quot; : [
    {
      &quot;enable&quot; : true,
      &quot;password&quot; : &quot;****&quot;,
      &quot;method&quot; : &quot;aes-256-cfb&quot;,
      &quot;remarks&quot; : &quot;Bandwangon&quot;,
      &quot;server&quot; : &quot;**.**.**.**&quot;,
      &quot;kcptun&quot; : {
        &quot;nocomp&quot; : false,
        &quot;key&quot; : &quot;****&quot;,
        &quot;crypt&quot; : &quot;salsa20&quot;,
        &quot;datashard&quot; : 70,
        &quot;mtu&quot; : 1350,
        &quot;mode&quot; : &quot;fast2&quot;,
        &quot;parityshard&quot; : 30,
        &quot;arguments&quot; : &quot;&quot;
      },
      &quot;enabled_kcptun&quot; : true,
      &quot;server_port&quot; : 29900,
      &quot;remarks_base64&quot; : &quot;QmFuZHdhbmdvbg==&quot;
    }
  ],
  &quot;proxyPort&quot; : 0,
  &quot;randomAlgorithm&quot; : 0,
  &quot;proxyEnable&quot; : false,
  &quot;enabled&quot; : true,
  &quot;autoban&quot; : false,
  &quot;proxyAuthUser&quot; : null,
  &quot;shareOverLan&quot; : false,
  &quot;localPort&quot; : 1080
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;请帮忙 star🌟&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;https://github.com/FongRay/FongRay.github.io&lt;/p&gt;
&lt;/blockquote&gt;

&lt;hr /&gt;
&lt;h3 id=&quot;附录&quot;&gt;附录&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;一些命令&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ /usr/bin/python /usr/local/bin/ssserver -c /etc/shadowsocks.json -d start
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# /etc/shadowsocks.json
{
    &quot;server&quot;:&quot;0.0.0.0&quot;,
    &quot;server_port&quot;:8989,
    &quot;local_address&quot;:&quot;127.0.0.1&quot;,
    &quot;local_port&quot;:1080,
    &quot;password&quot;:&quot;****&quot;,
    &quot;timeout&quot;:300,
    &quot;method&quot;:&quot;aes-256-cfb&quot;,
    &quot;fast_open&quot;:false
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;kcp config&lt;/p&gt;
&lt;/blockquote&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;{
    &quot;listen&quot;: &quot;:29900&quot;,
    &quot;target&quot;: &quot;127.0.0.1:8989&quot;,
    &quot;key&quot;: &quot;****&quot;,
    &quot;crypt&quot;: &quot;salsa20&quot;,
    &quot;mode&quot;: &quot;fast2&quot;,
    &quot;mtu&quot;: 1350,
    &quot;sndwnd&quot;: 1024,
    &quot;rcvwnd&quot;: 1024,
    &quot;datashard&quot;: 70,
    &quot;parityshard&quot;: 30,
    &quot;dscp&quot;: 46,
    &quot;nocomp&quot;: false,
    &quot;acknodelay&quot;: false,
    &quot;nodelay&quot;: 0,
    &quot;interval&quot;: 40,
    &quot;resend&quot;: 0,
    &quot;nc&quot;: 0,
    &quot;sockbuf&quot;: 4194304,
    &quot;keepalive&quot;: 10
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;数据流&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;img src=&quot;https://fangr-cc-image.oss-cn-beijing.aliyuncs.com/18-8-16/96675299.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;</content><author><name>Yimu</name></author><category term="VPS" /><category term="Config" /><summary type="html">这是干啥的</summary></entry><entry><title type="html">Git 错误使用导致的工作失误 | Git Usage</title><link href="http://localhost:2333/2018/05/23/my-fault-by-git.html" rel="alternate" type="text/html" title="Git 错误使用导致的工作失误 | Git Usage" /><published>2018-05-23T00:00:00+08:00</published><updated>2018-05-23T00:00:00+08:00</updated><id>http://localhost:2333/2018/05/23/my-fault-by-git</id><content type="html" xml:base="http://localhost:2333/2018/05/23/my-fault-by-git.html">&lt;p&gt;最近因为 Git 误操作坑了一把！&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://fangr-cc-image.oss-cn-beijing.aliyuncs.com/18-8-16/9699135.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;!-- more --&gt;

&lt;p&gt;如上图所示。&lt;/p&gt;

&lt;p&gt;准备发 5.7.5 的时候，提交错了分支！！&lt;/p&gt;

&lt;p&gt;我感觉整个过程有多个地方可以规避这个问题：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;本地新建了一个分支，而不是直接拉远程分支
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ git branch featur_5.7.5 ❌
$ git checkout -b feature_5.7.5 origin/feature_5.7.5 ⭕️
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;本地提交的时候，遇到 git 报错，要重视，不要随便加 &lt;code class=&quot;highlighter-rouge&quot;&gt;--force&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;提交完之后，看下终端是不是提示新建了一个分支！&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;打包的时候，可以看到最新的工程包中，代码的变更！可以看到是否是自己刚提交的代码&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;
&lt;p&gt;总结下来，&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;急中生乱！&lt;/li&gt;
  &lt;li&gt;对代码保持敬畏之心，特别是临上线的时候，任何变动都要仔细！&lt;/li&gt;
  &lt;li&gt;拼写错误要重视，特别是敏感操作！&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;这个错误操作，直接导致了线上 crash 率上升了几个点！&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;😒😒😒&lt;/p&gt;</content><author><name>Yimu</name></author><category term="Git" /><summary type="html">最近因为 Git 误操作坑了一把！</summary></entry><entry><title type="html">前端开发路线图 | Roadmap of Front-End Develop</title><link href="http://localhost:2333/2018/02/27/front-end-roadmap.html" rel="alternate" type="text/html" title="前端开发路线图 | Roadmap of Front-End Develop" /><published>2018-02-27T00:00:00+08:00</published><updated>2018-02-27T00:00:00+08:00</updated><id>http://localhost:2333/2018/02/27/front-end-roadmap</id><content type="html" xml:base="http://localhost:2333/2018/02/27/front-end-roadmap.html">&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;继续学前端&lt;/strong&gt;  🔥🔥🔥&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/kamranahmedse/developer-roadmap&quot;&gt;Web Developer Roadmap - 2018&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;~&amp;gt; 一份 Web 开发路线图，做的很漂亮 ( 已经4万多 star 了，可怕😳 )&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;script&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;alert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;hello js&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/script&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;
&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;先把前端这块弄扎实 💪&lt;/p&gt;
&lt;/blockquote&gt;

&lt;!-- more --&gt;

&lt;p&gt;&lt;img src=&quot;https://fangr-cc-image.oss-cn-beijing.aliyuncs.com/18-8-16/68178725.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://fangr-cc-image.oss-cn-beijing.aliyuncs.com/18-8-16/55663718.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;hr /&gt;
&lt;p&gt;作者又更新了！&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://fangr-cc-image.oss-cn-beijing.aliyuncs.com/18-8-16/49748946.jpg&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;坚持！！！&lt;/strong&gt;&lt;/p&gt;</content><author><name>Yimu</name></author><category term="FE" /><summary type="html">继续学前端 🔥🔥🔥</summary></entry><entry><title type="html">前端学习之路：Flex 布局 | Flex</title><link href="http://localhost:2333/2018/02/24/flex-demo.html" rel="alternate" type="text/html" title="前端学习之路：Flex 布局 | Flex" /><published>2018-02-24T00:00:00+08:00</published><updated>2018-02-24T00:00:00+08:00</updated><id>http://localhost:2333/2018/02/24/flex-demo</id><content type="html" xml:base="http://localhost:2333/2018/02/24/flex-demo.html">&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;继续学前端&lt;/strong&gt;  🔥🔥🔥&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;这两天看CSS相关的东西，主要学习了教程：&lt;a href=&quot;http://zh.learnlayout.com/&quot;&gt;CSS 布局&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;发现一个比较好的CSS参考网站：&lt;a href=&quot;http://css.doyoe.com/&quot;&gt;CSS 参考手册&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;目前前端布局方式已经不是几年前我印象里的各种 float postion 乱飞的情况了，&lt;/p&gt;

&lt;p&gt;以 flex 为代表的现代布局方式可以很方便的实现各种复杂界面。&lt;/p&gt;

&lt;p&gt;主要参考阮一峰的两个教程：&lt;/p&gt;

&lt;p&gt;1、&lt;a href=&quot;http://www.ruanyifeng.com/blog/2015/07/flex-grammar.html&quot;&gt;Flex 布局教程：语法篇&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;2、 &lt;a href=&quot;http://www.ruanyifeng.com/blog/2015/07/flex-examples.html&quot;&gt;Flex 布局教程：实例篇&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;这里有该教程的 Demo：&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/demo/flex.html&quot;&gt;http://fangr.cc/demo/flex.html&lt;/a&gt;&lt;/p&gt;

&lt;!-- more --&gt;</content><author><name>Yimu</name></author><category term="FE" /><category term="Flex" /><summary type="html">继续学前端 🔥🔥🔥</summary></entry></feed>